knitr::opts_chunk$set(echo = TRUE)
run_on_server <- TRUE
load_data_with_config <- TRUE
if (run_on_server) {
setwd("K:/Norman/BI_IPF2017/modelling")
} else {
setwd("C:/Users/npoh/Documents/Git/projects/bi/modelling")
}
library(palab)
library(palabmod)
library(ggplot2)
library(tidyverse)
library(stringr)
library(lubridate)
library(mlr)
divide_into_train_test_sets <- function(id_pos, train_prop = .75 ) {
#INPUT:
#id_list    : a patient IDs list that is unique
#train_prop : training proportion between 0 and 1
#OUTPUT
#a list with two lists of patient IDs, corresponding to the training and the test set
test_prop <- 1 - train_prop
mylist <- round( c(train_prop, test_prop) * length(id_pos) )
trainlist <- 1:mylist[1]
testlist <- (mylist[1]+1):length(id_pos)
order <- sample( length(id_pos) )
idlist <-  vector('list',2)
idlist[[1]] <- id_pos[order[trainlist]]
idlist[[2]] <- id_pos[order[testlist]]
return(idlist)
}
if (run_on_server) {
data_dir = ""
files <- c(
"K:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/all_features_neg.csv",
"K:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/all_features_pos.csv",
"K:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/all_features_score.csv",
"K:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/Ss_26m_218_features.csv")
date_files <- c(
"K:/Norman/BI_IPF2017/data/raw/IPF_Cohort.csv",
"K:/Norman/BI_IPF2017/data/raw/Non_IPF_Asthma_COPD_Cohort.csv",
"K:/Norman/BI_IPF2017/data/raw/Representative_Sample_Asthma_COPD_Cohort.csv",
"K:/Norman/BI_IPF2017/data/raw/Scoring_Sample_V2.csv" )
} else {
data_dir = "../data/features/"
files <- list.files(data_dir)
files
warning("date_files are not defined!")
}
bi <-  vector('list',3)
for (f in 1:2){
bi[[f]] <- read_transform(
input_csv = paste0(data_dir, files[f]),
var_config_csv = "bi_features_var_config.csv",
read_key_as_double = TRUE
)
}
knitr::opts_chunk$set(echo = TRUE)
run_on_server <- TRUE
load_data_with_config <- TRUE
if (run_on_server) {
setwd("K:/Norman/BI_IPF2017/modelling")
} else {
setwd("C:/Users/npoh/Documents/Git/projects/bi/modelling")
}
library(palab)
library(palabmod)
library(ggplot2)
library(tidyverse)
library(stringr)
library(lubridate)
library(mlr)
random_seed <- 123
set.seed(random_seed, "L'Ecuyer")
if (run_on_server) {
data_dir = ""
files <- c(
"K:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/all_features_neg.csv",
"K:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/all_features_pos.csv",
"K:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/all_features_score.csv",
"K:/Hui/Project_2016/BI_IPF_2016/04_Summary/004_data/Ss_26m_218_features.csv")
date_files <- c(
"K:/Norman/BI_IPF2017/data/raw/Non_IPF_Asthma_COPD_Cohort.csv",
"K:/Norman/BI_IPF2017/data/raw/IPF_Cohort.csv",
"K:/Norman/BI_IPF2017/data/raw/Representative_Sample_Asthma_COPD_Cohort.csv",
"K:/Norman/BI_IPF2017/data/raw/Scoring_Sample_V2.csv" )
} else {
data_dir = "../data/features/"
files <- list.files(data_dir)
files
warning("date_files are not defined!")
}
library(tictoc)
install.packages('tictoc')
install.packages('tictoc')
library(tictoc)
tic()
features <- saveRDS('features.rds')
tic()
features <- readRDS('features.rds')
toc()
features[[3]]
features[[1]]
dim(features[[1]])
head(features[[1]])
tic()
t <- 1
data_[[t]] <- rbind(( features[[2]], matched_patient_id %in% idlist[[t]]) , #pos
subset( features[[1]], matched_patient_id %in% idlist[[t]]) ) #neg 200
id_pos <- features[[2]]$patient_id
length(id_pos)
?write_csv
id_pos <- features[[2]]$patient_id
idlist <- divide_into_train_test_sets(id_pos, train_prop = .75)
divide_into_train_test_sets <- function(id_pos, train_prop = .75 ) {
#INPUT:
#id_list    : a patient IDs list that is unique
#train_prop : training proportion between 0 and 1
#OUTPUT
#a list with two lists of patient IDs, corresponding to the training and the test set
test_prop <- 1 - train_prop
mylist <- round( c(train_prop, test_prop) * length(id_pos) )
trainlist <- 1:mylist[1]
testlist <- (mylist[1]+1):length(id_pos)
order <- sample( length(id_pos) )
idlist <-  vector('list',2)
idlist[[1]] <- id_pos[order[trainlist]]
idlist[[2]] <- id_pos[order[testlist]]
return(idlist)
}
id_pos <- features[[2]]$patient_id
idlist <- divide_into_train_test_sets(id_pos, train_prop = .75)
write_csv(id_pos, "idlist_partition.txt")
write_csv(as.data.frame(id_pos), "idlist_partition.txt")
getwd()
run_on_server <- TRUE
load_data_with_config <- TRUE
if (run_on_server) {
setwd("K:/Norman/BI_IPF2017/modelling")
} else {
setwd("C:/Users/npoh/Documents/Git/projects/bi/modelling")
}
library(palab)
library(palabmod)
library(ggplot2)
library(tidyverse)
library(stringr)
library(lubridate)
library(mlr)
library(tictoc)
getwd()
write_csv(as.data.frame(id_pos), "idlist_partition.txt")
idlist <- read_csv("idlist_partition.txt")
saveRDS(idlist, "idlist.rds")
if ( file.exists("idlist.rds")) {
idlist <- readRDS("idlist.rds")
} else {
id_pos <- features[[2]]$patient_id
idlist <- divide_into_train_test_sets(id_pos, train_prop = .75)
saveRDS(idlist, "idlist.rds")
}
idlist
length(idlist)
idlist <- divide_into_train_test_sets(id_pos, train_prop = .75)
idlist
saveRDS(idlist, "idlist.rds")
idlist <- readRDS("idlist.rds")
idlist
idlist[[1]]
idlist[[2]]
dim(idlist[[2]])
length(idlist[[2]])
length(idlist[[1]])
tic()
t <- 1
data_[[t]] <- rbind(( features[[2]], matched_patient_id %in% idlist[[t]]) , #pos
subset( features[[1]], matched_patient_id %in% idlist[[t]]) ) #neg 200
#subset( features[[3]], matched_patient_id %in% idlist[[t]]) ) #neg 653
toc()
# the test set
t <- 2
data_[[t]] <- rbind(subset( features[[2]], matched_patient_id %in% idlist[[t]]) , #pos
subset( features[[1]], matched_patient_id %in% idlist[[t]]) ) #neg 200
#subset( features[[3]], matched_patient_id %in% idlist[[t]]) ) #neg 653
data_[[t]] <- rbind(( features[[2]], matched_patient_id %in% idlist[[t]]) , #pos
subset( features[[1]], matched_patient_id %in% idlist[[t]]) ) #neg 200
features[[2]]$matched_patient_id %in% idlist[[t]]
subset( features[[2]], matched_patient_id %in% idlist[[t]])
tic()
t <- 1
data_[[t]] <- rbind( subset( features[[2]], matched_patient_id %in% idlist[[t]]) , #pos
subset( features[[1]], matched_patient_id %in% idlist[[t]]) ) #neg 200
#subset( features[[3]], matched_patient_id %in% idlist[[t]]) ) #neg 653
toc()
tic()
t <- 2
data_[[t]] <- rbind(subset( features[[2]], matched_patient_id %in% idlist[[t]]) , #pos
subset( features[[1]], matched_patient_id %in% idlist[[t]]) ) #neg 200
#subset( features[[3]], matched_patient_id %in% idlist[[t]]) ) #neg 653
toc()
length(data_)
data_ <- vector('list', 2)
tic()
t <- 1
data_[[t]] <- rbind( subset( features[[2]], matched_patient_id %in% idlist[[t]]) , #pos
subset( features[[1]], matched_patient_id %in% idlist[[t]]) ) #neg 200
#subset( features[[3]], matched_patient_id %in% idlist[[t]]) ) #neg 653
toc()
# the test set
tic()
t <- 2
data_[[t]] <- rbind(subset( features[[2]], matched_patient_id %in% idlist[[t]]) , #pos
subset( features[[1]], matched_patient_id %in% idlist[[t]]) ) #neg 200
#subset( features[[3]], matched_patient_id %in% idlist[[t]]) ) #neg 653
toc()
dim(features[[1]])
dim(features[[2]])
dim(data_[[2]])
dim(data_[[1]])
1292430 + 430743
1714600 + 8573
sum(data_[[1]]$label)
sum(data_[[1]]$label==0)
train_mlr <- makeClassifTask(data=data_[[1]] %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF")), target="label", positive=1)
dim(data=data_[[1]] %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF")))
dim(data=data_[[1]] %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF"))
)
dim(data_[[1]] %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF")))
dim(data_[[1]])
test_mlr <- makeClassifTask(data=data_[[2]] %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF")), target="label", positive=1)
xgb_lrn <- makeLearner(cl = "classif.xgboost", predict.type = "prob")
model <- train(learner = xgb_lrn, task = train_mlr)
model
pred <- predict(object = model, task = test_mlr)
head(pred$data)
tail(pred$data)
pr1 <- pr.curve(scores.class0 = pred$data$prob.1,
weights.class0 = (as.numeric(pred$data$truth) - 1),
curve = TRUE)
library(palab)
library(palabmod)
library(ggplot2)
library(tidyverse)
library(stringr)
library(lubridate)
library(mlr)
library(tictoc)
pr1 <- pr.curve(scores.class0 = pred$data$prob.1,
weights.class0 = (as.numeric(pred$data$truth) - 1),
curve = TRUE)
library(PRROC)
install.packages('PRROC')
library(PRROC)
pr1 <- pr.curve(scores.class0 = pred$data$prob.1,
weights.class0 = (as.numeric(pred$data$truth) - 1),
curve = TRUE)
plot(pr1)
plot(pr1)
plot(pr1)
pr1
plot(pr1)
pr1$curve
write_cvs(pr1$curve, 'xgboost.cvs')
write_csv(pr1$curve, 'xgboost.csv')
write_csv(as.data.frame(pr1$curve), 'xgboost.csv')
lr_lrn <- makeLearner(cl = "classif.logistic", predict.type = "prob")
lr_lrn <- makeLearner(cl = "classif.logreg", predict.type = "prob")
lr_model <- train(learner = lr_lrn, task = train_mlr)
sum(data=data_[[1]])
dim(data_[[1]])
sum(data_[[1]])
sum(data_[[1]]$LVL3_CHRN_ISCH_HD_FLAG)
sapply(data_[[1]], sum)
data__ <- sapply(data_[[1]], as.double)
data__
data__ <- as.data.frame( sapply(data_[[1]], as.double) )
test_ <- as.data.frame( sapply(data__, mean) )
test_
knitr::opts_chunk$set(echo = TRUE)
is.na(test_$`sapply(data__, mean)`)
! is.na(test_$`sapply(data__, mean)`)
colnames_ <- colnames(data_[[1]])
selected_vars <- colnames_[! is.na(test_$`sapply(data__, mean)`)]
selected_vars
train_lr <- makeClassifTask(data=data_[[1]] %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF"), one_of(selected_vars)), target="label", positive=1)
train_lr <- makeClassifTask(data=data_[[1]] %>% select(one_of(selected_vars)) %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF"), one_of(selected_vars)), target="label", positive=1)
train_lr <- makeClassifTask(data=data_[[1]] %>% select(one_of(selected_vars)) %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF"), one_of(selected_vars)), target="label", positive=1)
dim(data_[[1]] %>% select(one_of(selected_vars)))
train_mlr <- makeClassifTask(data=data_[[1]] %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF")), target="label", positive=1)
train_lr <- makeClassifTask(data=data_[[1]] %>% select(one_of(selected_vars)) %>% select(-patient_id, -matched_patient_id, -ends_with("_DIFF")), target="label", positive=1)
train_lr <- makeClassifTask(data=data_[[1]] %>% select(one_of(selected_vars)) %>% select(-patient_id, -matched_patient_id), target="label", positive=1)
train_lr <- makeClassifTask(data=data_[[1]] %>% select(one_of(selected_vars)), target="label", positive=1)
train_lr
train_lr$env
selected_vars
train_lr <- makeClassifTask(data=data_[[1]] %>% select(one_of(selected_vars) -matched_patient_id), target="label", positive=1)
train_lr <- makeClassifTask(data=data_[[1]] %>% select(one_of(selected_vars), -matched_patient_id), target="label", positive=1)
train_lr <- makeClassifTask(data=data_[[1]] %>% select(one_of(selected_vars), -matched_patient_id, -ends_with("_DIFF")), target="label", positive=1)
train_lr <- makeClassifTask(data=data_[[1]] %>% select(one_of(selected_vars), -matched_patient_id), target="label", positive=1)
test_lr <- makeClassifTask(data=data_[[2]] %>% select(one_of(selected_vars), -matched_patient_id), target="label", positive=1)
lr_lrn <- makeLearner(cl = "classif.logreg", predict.type = "prob")
lr_model <- train(learner = lr_lrn, task = train_mlr)
lr_model <- train(learner = lr_lrn, task = train_lr)
exit
